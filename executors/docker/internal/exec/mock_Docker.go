// Code generated by mockery v2.28.2. DO NOT EDIT.

package exec

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	wait "gitlab.com/gitlab-org/gitlab-runner/executors/docker/internal/wait"
)

// MockDocker is an autogenerated mock type for the Docker type
type MockDocker struct {
	mock.Mock
}

// Exec provides a mock function with given fields: ctx, containerID, streams, gracefulExitFunc
func (_m *MockDocker) Exec(ctx context.Context, containerID string, streams IOStreams, gracefulExitFunc wait.GracefulExitFunc) error {
	ret := _m.Called(ctx, containerID, streams, gracefulExitFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, IOStreams, wait.GracefulExitFunc) error); ok {
		r0 = rf(ctx, containerID, streams, gracefulExitFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockDocker interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDocker creates a new instance of MockDocker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDocker(t mockConstructorTestingTNewMockDocker) *MockDocker {
	mock := &MockDocker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
