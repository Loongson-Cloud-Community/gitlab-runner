// Code generated by mockery v2.14.0. DO NOT EDIT.

package parser

import mock "github.com/stretchr/testify/mock"

// MockPath is an autogenerated mock type for the Path type
type MockPath struct {
	mock.Mock
}

// Contains provides a mock function with given fields: basePath, targetPath
func (_m *MockPath) Contains(basePath string, targetPath string) bool {
	ret := _m.Called(basePath, targetPath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(basePath, targetPath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsAbs provides a mock function with given fields: path
func (_m *MockPath) IsAbs(path string) bool {
	ret := _m.Called(path)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsRoot provides a mock function with given fields: path
func (_m *MockPath) IsRoot(path string) bool {
	ret := _m.Called(path)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Join provides a mock function with given fields: elem
func (_m *MockPath) Join(elem ...string) string {
	_va := make([]interface{}, len(elem))
	for _i := range elem {
		_va[_i] = elem[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(elem...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewMockPath interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPath creates a new instance of MockPath. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPath(t mockConstructorTestingTNewMockPath) *MockPath {
	mock := &MockPath{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
