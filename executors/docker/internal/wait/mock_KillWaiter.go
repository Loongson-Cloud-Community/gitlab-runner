// Code generated by mockery v2.28.2. DO NOT EDIT.

package wait

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockKillWaiter is an autogenerated mock type for the KillWaiter type
type MockKillWaiter struct {
	mock.Mock
}

// StopKillWait provides a mock function with given fields: ctx, containerID, timeout, gracefulExitFunc
func (_m *MockKillWaiter) StopKillWait(ctx context.Context, containerID string, timeout *int, gracefulExitFunc GracefulExitFunc) error {
	ret := _m.Called(ctx, containerID, timeout, gracefulExitFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *int, GracefulExitFunc) error); ok {
		r0 = rf(ctx, containerID, timeout, gracefulExitFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wait provides a mock function with given fields: ctx, containerID
func (_m *MockKillWaiter) Wait(ctx context.Context, containerID string) error {
	ret := _m.Called(ctx, containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockKillWaiter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockKillWaiter creates a new instance of MockKillWaiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockKillWaiter(t mockConstructorTestingTNewMockKillWaiter) *MockKillWaiter {
	mock := &MockKillWaiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
