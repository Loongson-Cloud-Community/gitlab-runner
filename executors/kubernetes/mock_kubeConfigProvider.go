// Code generated by mockery v2.14.0. DO NOT EDIT.

package kubernetes

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"
)

// mockKubeConfigProvider is an autogenerated mock type for the kubeConfigProvider type
type mockKubeConfigProvider struct {
	mock.Mock
}

// Execute provides a mock function with given fields:
func (_m *mockKubeConfigProvider) Execute() (*rest.Config, error) {
	ret := _m.Called()

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockKubeConfigProvider interface {
	mock.TestingT
	Cleanup(func())
}

// newMockKubeConfigProvider creates a new instance of mockKubeConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockKubeConfigProvider(t mockConstructorTestingTnewMockKubeConfigProvider) *mockKubeConfigProvider {
	mock := &mockKubeConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
