// Code generated by mockery v2.14.0. DO NOT EDIT.

package auth

import (
	types "github.com/docker/cli/cli/config/types"
	mock "github.com/stretchr/testify/mock"
)

// mockAuthConfigResolver is an autogenerated mock type for the authConfigResolver type
type mockAuthConfigResolver struct {
	mock.Mock
}

// Execute provides a mock function with given fields:
func (_m *mockAuthConfigResolver) Execute() (string, map[string]types.AuthConfig, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 map[string]types.AuthConfig
	if rf, ok := ret.Get(1).(func() map[string]types.AuthConfig); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]types.AuthConfig)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTnewMockAuthConfigResolver interface {
	mock.TestingT
	Cleanup(func())
}

// newMockAuthConfigResolver creates a new instance of mockAuthConfigResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockAuthConfigResolver(t mockConstructorTestingTnewMockAuthConfigResolver) *mockAuthConfigResolver {
	mock := &mockAuthConfigResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
