// Code generated by mockery v2.14.0. DO NOT EDIT.

package ca_chain

import (
	x509 "crypto/x509"

	mock "github.com/stretchr/testify/mock"
)

// mockVerifier is an autogenerated mock type for the verifier type
type mockVerifier struct {
	mock.Mock
}

// Execute provides a mock function with given fields: cert
func (_m *mockVerifier) Execute(cert *x509.Certificate) ([][]*x509.Certificate, error) {
	ret := _m.Called(cert)

	var r0 [][]*x509.Certificate
	if rf, ok := ret.Get(0).(func(*x509.Certificate) [][]*x509.Certificate); ok {
		r0 = rf(cert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]*x509.Certificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*x509.Certificate) error); ok {
		r1 = rf(cert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockVerifier interface {
	mock.TestingT
	Cleanup(func())
}

// newMockVerifier creates a new instance of mockVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockVerifier(t mockConstructorTestingTnewMockVerifier) *mockVerifier {
	mock := &mockVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
